
README for the Perl Module CGI::FastTemplate - 1.09

	Copyright (c) 1998-1999 Jason Moore <jmoore@sober.com>.  All rights
	reserved.

	This program is free software; you can redistribute it and/or
	modify it under the same terms as Perl itself.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	Artistic License for more details.

説明
----

CGI::FastTemplateはテンプレートの管理と変数名を値で置き換える役割を持ち、
アプリケーションのロジックと、特化した実装の詳細部分を分離することによって
利益を得るような中大規模のウェブアプリケーション(CGI, mod_perl)用に設計されて
いる。


例えばFastTemplateを用いることによって可能になるのは:

	- 多国語対応のアプリケーション

	- 高帯域用かテキストのみのバージョンかを選択できるアプリケーション

	- グラフィックデザイナーはプログラマーと独立して仕事ができるようになる

	- インターフェースのデザインを共有することができる。

CGI::FastTemplateには次に挙げるような特徴がある。

	スピード

	FastTemplateではevalを使っておらず、ただ１つの正規表現だけでパース
	している。正規表現でのパースでは単純な変数の穴埋めしか行われない
	(言い替えれば、テンプレートにロジックを加えることは不可能なのだ。
	よってあなたはコードのロジックを守ることができる)。これが名前に
	'Fast'が付く結縁なのだ。

	効力

	FastTemplateの関数は可能な限りいつでもリファレンスを受け入れ、
	返すのだが、おかげで不要な引数のコピーを行わずに済む。(ハッシュ、
	スカラーなど)。

	携帯性

	APIは強力で携帯性があり、あなたがとても複雑なHTMLドキュメント、
	あるいはHTMLインターフェースを構築することを可能とするのだ。そして、
	それは100%perlで書かれており、Unix又はNTで動作する。また、HTML
	ドキュメントを構築するだけに限らず、アスキーコードをベースとした
	ドキュメントならどんなものでも構築することができるのだ。
	(例えばpostscriptやXML、emailである)。

	より詳細な情報は'FastTemplate.pm'に含まれる。

インストール法
--------------

インストールするには、unzipとuntarで圧縮ファイルを展開し、作成された
ディレクトリ内で:

	perl Makefile.PL
	make
	make install

Note: もし動作しない場合、'FastTemplate.pm'をperlディストリビューションの
CGIディレクトリにコピーするだけでも動作させることができる。

もしモジュールのインストール無しに動作をテストしたい場合は次のコードを
書き加えることで可能になる:

	BEGIN
	{
		unshift(@INC, "/wherever/you/put/CGI-FastTemplate/");
	}

	use CGI::FastTemplate;


ドキュメント
------------

ドキュメントはモジュールにpodフォーマットで含まれている。一度CGI::FastTemplate
をインストールしたならこう入力して欲しい:

	perldoc CGI::FastTemplate

アンインストールされたならば:

	perldoc ./FastTemplate.pm

perldocに関するより詳しい情報を調べるには 'perldoc perldoc'と入力すると良い。

作者
----

Jason Moore <jmoore@sober.com>

コメントでも提案でもバグレポートでも自由に送って欲しい。

変更点
------

Perl拡張機能CGI::FastTemplateの更新履歴。

1.09 Sun Jun 27 23:40:14 EDT 1999

    - 今現在、オブジェクトが属性を保存するのにハッシュのリファレンスではなく
   配列のリファレンスを使うようになっている。ありがとう: : Greg Bacon。
  「配列でオブジェクトを構築したらどうだ。」と言うYAPCでの話しに関して。

   note: APIは同じである -- これは背後での実装が変更されたと言うことである。

        - podドキュメントを少し編集
        - いくつかのtestスクリプトと２つのテンプレートを追加

1.08 Sun Jan 24 23:14:03 EST 1999

        - 少しpodドキュメントを編集
        - GNUの著作権を追加
        - 'Changes' fileはディストリビューションから除外。'README'を参照して
          欲しい。

1.07  Sun Jan 24 23:14:03 EST 1999

        - 新しい${VAR}スタイルの変数をサポートするためにメインの世紀表現を
        書き換えた。ありがとう: Eric L. Brine <q2ir@unb.ca>
        - podドキュメントを少し編集


1.06  Mon Jan  4 13:47:13 EST 1999

        - clear_tpl()がロードされたテンプレートを選択して消去できるように拡張
        された。大きなテンプレートを扱う持続型あるいは長時間駆動型のコードでは
        有用であるが、メモリ管理をしたくない場合は使う必要はない。

	clear_tpl()         - ロードされた全テンプレートをキャッシュから消去
	clear_tpl(SCALAR)   - SCALARで指定したテンプレートのみ消去
	clear_tpl(ARRAY)    - 配列の中身に対応する名前のテンプレートを消去


1.05  Fri Nov 27 15:27:54 EST 1998
        - clear_parse() (別名: clear())をスカラーと同様に配列で操作できるように
        拡張された。 例えば e.g. $tpl->clear("ROWS") 又は、 $tpl->clear("ROWS", "COLS", "HEAD"); 
        は有効である。

1.04  Thu Oct 29 09:57:15 EST 1998

        - strict()では最後のドキュメントで未知の変数を空の文字列で置き換える
        代わりにそのままにしておくようになった。 古い振る舞いに戻すための
        参考: no_strict 

1.03  Thu Oct 15 10:42:14 EDT 1998

        - -wオプション付きで起動した場合、間違った警告が出ないようにマイナー
        チェンジした(例えば {strict}が{"strict"}になった。)

1.02  Tue Sep 22 08:57:29 EDT 1998

        - $の後に続く最初の文字として数字であるのを許してしまうバグを修正。
        変数は現在: $[A-Z][A-Z0-9_]+
        ありがとう: Benjamin Low <b.d. low@unsw.edu.au>

        -対応する変数が見付からなかった際STDERRに警告を吐き出すか否かを切替える
        strict() no_strict()を追加。

1.01  Tue Sep 15 10:01:44 EDT 1998

        - パースされたhashからスカラーを消去するclear(SCALAR)が追加された。
        例.
		$tpl->clear("FOO");	## equivalent to:
		$tpl->assign(FOO=>"");

        - まちがった警告を出さないようにするため、parse()内で$v=''を定義しない
        ようにした。ありがとう: Benjamin Low <b.d.low@unsw.edu.au>

        - ファイルに分割しなくともテンプレートを定義できるようにメソッド
        define_nofile()を追加(別名: define_raw)。

1.00  Thu Aug 20 11:59:22 1998
        - オリジナルバージョンはh2xsよって作られた1.18である。
        - 初公開(書き直し)