=head1 名前

File::Backup - 簡単なファイルのバックアップ &　ローテーションの自動化

=head1 概要

  use File::Backup;

  backup(
      from => '/source/path/to/backup/from',
      to   => '/destination/path/to/backup/to',
      keep => 5,
      timeformat => 'YYMMDD_hhmmss',
  );

=head1 説明

このモジュールは自動的に元のファイルをロックをおこなう、
記録と圧縮(いわゆる"バックアップ")計画を実装します。

* 現在のところ、これはUnixパス文字列でのtarとgzipだけです。おそらく
あなたのコンピュータでは、これで大丈夫でしょう...。クロス・プラットフォームの
ファイルのバックアップはもうすぐ実装される予定です。

この新しいバージョンでの、本当に素晴らしい特徴は、tarとgzipの
あなたのローカルなバージョンを見つけるためにC<File::Which>を利用することです。
さらにC<LockFile::Simple>流の自動的なファイルロックが実装されています。

とてもスゴいことの１つは、任意のタイムスタンプ・フォーマット文字列を
持ったC<backup>関数を与えることができるということです。

またtarに圧縮を適用するかどうかを指定することもできます。

これらのオプションの全ては下記のC<backup>関数のドキュメントのセクションで
詳しく説明されています。

=head1 エクスポートされる関数

=over 4

=item B<backup> %ARGUMENTS

  $backed_files = backup(%arguments);

もっとも単純な形式では、この関数は入力を元ディレクトリ、出力先
ディレクトリとして受け取り、元ディレクトリのファイルの圧縮された
アーカイブファイルを出力先ディレクトリに入れます。

元のパスをキーに、アーカイブファイルの名前を値にもつハッシュの
リファレンスを返します。

* バックアップされたファイルのリストが実装されたあかつきには(C<TO DO>を参照)、
これらのファイルがキーに、バックアップされた新しく、タイムスタンプが
つけられたパス名が値となるでしょう。

この関数の引数を以下に示します。

=over 4

=item * debug => 0 | 1

冗長な処理を有効にします。デフォルトは0(オフ)です。

=item * from => $PATH

バックアップするファイルの元ディレクトリ。与えられなければ、現在の
ディレクトリが使われます。

=item * to => $PATH

アーカイブが置かれるオプションの出力先ディレクトリ。もし与えられなければ
現在のディレクトリが使われます。

=item * keep => $NUMBER

ディレクトリに保存するバックアップの最大数。

これを正の数をC<n>に設定することにより、C<n>個の最も新しい
バックアップが保存されるようになります。これを負の数に設定すると
すべてのバックアップを保存するようになります。デフォルトでは
マジカルな数である7(一週間分のバックアップ)に設定されます。

=item * timeformat => $STRING

バックアップファイルに付けられるときに使われる日付時刻の形式文字列。

このパラメータは、タイムスタンプをなくすために何も指定しなかったり、
C<time>をスタンプとして使うために'epoch'という単語としたり、
順に以下の組み合わせが入っている文字列にしたりといったことができます：

  Y => 年
  M => 月
  D => 日
  h => 時
  m => 分
  s => 秒

いくつかの例を示しましょう:

'YYYY-MM-DD_hh-mm-ss' はC<sprintf>による'%4d-%02d-%02d_%02d-%02d-%02d'の
ように見えます。2003年1月2日 午前3時4分5秒は'2003-01-02_03-04-05'に
なります。

後ろの書式文字を省くこともできます。'YYYYMMDD'は'%04d%02d%02d'になり
'20030102'を作成します。

このモジュールは年については常に4桁を使うことに注意してください。
そのため'Y-MMDD'は'2003-0102'を作成します。

この"逆順の日付"体系はバックアップファイルを厳密に日付順に並び替える
ために使われます。つまりスタンプは時間の単位が最も大きいものの順で
なければなりません。もちろんあいまいなスタンプを作ることもできます。
'YMDhms'は'200312345'を作成します。これが2003年の12月3日でしょうか？
だれかわかりますか？

=item * archive => 0 | 1

バックアップファイルをアーカイブするためのフラグ。デフォルトは1。

* これはまだ有効ではありません。しかし将来のバージョンではファイルは
一まとめにアーカイブされることなく、スタンプがつけられバックアップ・
ディレクトリにコピーすることができるようになります。

=item * archiver => $PATH_TO_PROGRAM

アーカイブするプログラム。デフォルトはあなたのローカルなtar。

=item * archive_flags => $COMMAND_SWITCHES

オプションのアーカイブのスィッチ。デフォルトはC<'-cf'>。

=item * prefix => $STRING

オプションで、(タイムスタンプ文字列の前に)アーカイブファイル名の
先頭として頭に付けられる文字列。

これは複数の異なるもののバックアップを同じディレクトリに保存する
とき便利です。

=item * suffix => $STRING

オプションで、しかし重要なアーカイブの拡張子。デフォルトはC<'.tar'>
です。

=item * compressor => $PATH_TO_PROGRAM

圧縮するプログラム。デフォルトはあなたのローカルなgzip。

=item * compress_flags => $COMMAND_SWITCHES

オプションで圧縮でのスィッチ。デフォルトはオフ(つまり何も設定
しません)。

=item * compress => 0 | 1

アーカイブ圧縮をオフやオンにするフラグ。

* 現在は、これはC<archive>フラグがオンのときにだけ意味があります。

=item * files => \@FILENAMES

オプションでバックアップするファイルのリスト。

B<XXX まだ実装されていません>

=item * include => $REGEXP

オプションで中にいれるファイル名にマッチする正規表現。

B<XXX まだ実装されていません>

=item * exclude => $REGEXP

オプションで除外するファイル名にマッチする正規表現。

B<XXX まだ実装されていません>

=item * flatten => 0 | 1

元のディレクトリのツリー構造を保存するかどうかのフラグ。デフォルト
では0に設定します。

B<XXX まだ実装されていません>

=item * unique_names => 0 | 1

元のファイルがアーカイブのなかでユニークな名前を持つことを強制するフラグ。
デフォルトは0。

B<XXX まだ実装されていません>

=back

以下の以前からのパラメータも有効です。しかし今では対応するパラメータの
別名となっています：

  tar           => archiver
  tarflags      => archive_flags
  torootname    => prefix
  tarsuffix     => suffix
  compress      => compressor
  compressflags => compress_flags

=back

=head1 プライベート関数

=over 4

=item B<_time2str> [%ARGUMENTS]

  $timestamp = _time2str(
      format     => $YMDhms_format,
      use_gmtime => $boolean,
  );

ファイル名で使われる日付時刻文字列を返します。

YMDhmsフォーマット文字列については、C<timeformat>パラメータの
ドキュメントをご覧ください。

C<backup>関数呼び出しでC<use_gmtime>フラグが設定されなければ、
システムのC<localtime>が使われます。

フォーマット文字列が与えられなければ、スタンプのためには空文字列が
返されます。'epoch'という文字列に設定されると、返されるスタンプの
ためにはperlのC<time>関数が使われます。そうでなければ、
YMDhmsフォーマット文字列が使われます。

=item B<_format_to_regexp> $FORMAT

  $re = _format_to_regexp($YMDhms_format);

'YMDhmsフォーマット文字列'を簡単な正規表現に変換します。

この関数は単純にフォーマット文字列を\d(数字のメタキャラクタ)で
置き換えます。

=item B<_format_to_printf> $FORMAT

  $printf_format = _format_to_printf($YMDhms_format);

この関数はYMDhmsフォーマット文字列をprintf フォーマット文字列 
%0B<n>d で置き換えます。B<n>はそれぞれの、連続したYMDhmsフォーマット
文字の数になります。

=back

=head1 バグ

同じ名前になってしまうので、1秒の間に同じもののバックアップを
２つ作ることはできません。これって本当にバグかなぁ？

=head1 TO DO

パラメータ並べ替えすべての端のケースをテストする!

与えられたファイル名やワイルドカードのリストの処理を制限する。

ファイルを含めるそして除外する正規表現のサポート。

C<Getopt::*>モジュールを使った、やさしいコマンドライン機能を作る。

OSを理解したバックアップ文字列を組み立てるためC<File::Spec>
あるいは C<Class::Path> を使う。

Unixシステムコールの代わりにC<Archive::Any/File/Tar/Zip>を使う。

perlモジュールでカバーされない他のアーカイバや圧縮ソフトを使う。

もちろん圧縮についても同じことをする(例えばC<Compress::Zlib>等).

レコード・ロックつきでデータベースにバックアップする。

C<File::Find>でディレクトリを降りていく。

C<time2str>関数のために標準ISOフォーマットを使う。

さまざまなバックアップファイルの名前付け方法を可能にする
(文字列フォーマットでも)。

"数にナイーブ"で時間も考慮したC<keep>オプションを作る。
C<ctime>とC<mtime>ファイル属性を考えてみてください。

ファイルシステムのディレクトリ・ツリー構造にない元ファイルが
バックアップされることを可能にする。つまり"平坦化された"アーカイブ。

バックアップに使われるファイル名がユニークになるようユーザに確認
させることを可能にする。

焦点を絞りこんだバックアップ作業を実装するためC<File::Backup::Base>の
スーパークラスを作る。(例えばcvsやscpで、nfsあるいはレガシーな
デバイスへのバックアップなど)

そう。C<Net::SCP>でscpをサポートする。これはC<File::Backup::SCP>
あるいはC<File::Backup qw(scp)>なるでしょう。ウーン。

もしうまく尋ねることができたら、コードがうまくシステムのアーカイブ・プログラムを
探すようにする。

=head1 参考資料

L<Cwd>

L<File::Which>

L<LockFile::Simple>

=head1 謝辞

Ken Williams(別名 DrMath)そしてJoshua Keroes (別名 ua)の
援助、洞察、提案そして論評に感謝します。

=head1 作者(=AUTHORS)

オリジナル: Ken Williams, E<lt>kwilliams@cpan.orgE<gt>

現在: Gene Boggs, E<lt>gene@cpan.orgE<gt>

=head1 著作権(=COPYRIGHT)

Copyright 1998-2003 Ken Williams.  All rights reserved.

This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 翻訳者

川合孝典(GCD00051@nifty.ne.jp)
