=encoding utf-8

=head1 名前

YAML::Node - A generic data node that encapsulates YAML information

YAML::Node - YAML 情報を内包する汎用データノード

=head1 概要

    use YAML;
    use YAML::Node;
    
    my $ynode = YAML::Node->new({}, 'ingerson.com/fruit');
    %$ynode = qw(orange orange apple red grape green);
    print Dump $ynode;

yields:

生成物:

    --- !ingerson.com/fruit
    orange: orange
    apple: red
    grape: green

=head1 説明

A generic node in YAML is similar to a plain hash, array, or scalar node
in Perl except that it must also keep track of its type. The type is a
URI called the YAML type tag.

YAML の一般的なノードはその型も維持しなければならない点を除けば
Perl のハッシュ, 配列, スカラーと似ています. 型は YAML タイプタグ
と呼ばれる URI の一種です.

YAML::Node is a class for generating and manipulating these containers.
A YAML node (or ynode) is a tied hash, array or scalar. In most ways it
behaves just like the plain thing. But you can assign and retrieve and
YAML type tag URI to it. For the hash flavor, you can also assign the
order that the keys will be retrieved in. By default a ynode will offer
its keys in the same order that they were assigned.

YAML::Node はこれらのコンテナを生成, 操作するためのクラスです. 
YAML ノード(もしくは ynode) は tie されたハッシュもしくは配列, スカラー
です. 多くの場合その振る舞いは別段変化しません. しかし YAML ノードに
対しては YAML タイプタグ URI を割り当てることができます. 
ハッシュにはキーの順序を割り当てることもできます. デフォルトでは ynode 
は割り当てられた順に提供されます.

YAML::Node has a class method call new() that will return a ynode. You
pass it a regular node and an optional type tag. After that you can
use it like a normal Perl node, but when you YAML::Dump it, the magical
properties will be honored.

YAML::Node には ynode を返すクラスメソッド new() があります. 
通常のノードと, 任意でタイプタグを引数に渡します. 
あとは普通の Perl のノードを同じ様に使うことができます. しかし 
YAML::Dump 時にはmagic属性が使われます.

This is how you can control the sort order of hash keys during a YAML
serialization. By default, YAML sorts keys alphabetically. But notice
in the above example that the keys were Dumped in the same order they
were assigned.

YAML シリアライゼーションにおいてハッシュキーの並び順を制御するには
これを使います. デフォルトではアルファベット順に整列されます. 
しかし先の例ではキーは割り当てられた順に Dump されています.

YAML::Node exports a function called ynode(). This function returns the tied object so that you can call special methods on it like ->keys().

YAML::Node は ynode() をエクスポートします. この関数は
tie されたオブジェクトを返すので, ->keys() の様な特別なメソッドを
呼び出すことができます.

keys() works like this:

keys() は次のように動作します:

    use YAML;
    use YAML::Node;
    
    %$node = qw(orange orange apple red grape green);
    $ynode = YAML::Node->new($node);
    ynode($ynode)->keys(['grape', 'apple']);
    print Dump $ynode;

produces:

結果:

    ---
    grape: green
    apple: red

It tells the ynode which keys and what order to use.

このように, どのキーをどんな順で使うかを指定することができます.

ynodes will play a very important role in how programs use YAML. They
are the foundation of how a Perl class can marshall the Loading and
Dumping of its objects.

ynode はプログラムがどのように YAML を使うかによってとても重要な
役割を担っています. これは Perl クラスがオブジェクトをロード及び
ダンプする方法の基礎となっています.

The upcoming versions of YAML.pm will have much more information on this.

YAML.pm の今後のバージョンではもっと多くの情報を持っているでしょう.

=head1 著者

Ingy dE<ouml>t Net <ingy@cpan.org>


=head1 著作権

Copyright (c) 2006. Ingy dE<ouml>t Net. All rights reserved.
Copyright (c) 2002. Brian Ingerson. All rights reserved.


This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

このプログラムはフリーソフトウェアです. このプログラムは Perl 自身と同じ
条件下で再配布・改変可能です.

See L<http://www.perl.com/perl/misc/Artistic.html>

参考 http://www.perl.com/perl/misc/Artistic.html

