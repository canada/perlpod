=encoding utf-8

=head1 名前

ysh - The YAML Test Shell

ysh - YAML テストシェル

=head1 概要

 ysh [options]

=head1 説明

This program is designed to let you play with the YAML.pm module in
an interactive way. When you to type in Perl, you get back YAML. And
vice versa.

このプログラムは YAML.pm モジュールとインタラクティブに遊べるように
作られています. Perl 言語でタイプすると, それが YAML で帰ってきたり, 
他にもいろいろあります.

By default, every line you type is a one line Perl program, the return
value of which will be displayed as YAML.

デフォルトでは, 入力した各行が Perl のプログラム1行になり, 
その復帰値が YAML 形式で表示されます.

To enter multi-line Perl code start the first line with ';' and use as
many lines as needed. Terminate with a line containing just ';'.

複数行から成る Perl コードを入力するときには, 最初の行を ';' で
始めて, 必要な分の行を入力してください. ';' のみから成る行で終了します.

To enter YAML text, start with a valid YAML separator/header line
which is typically '---'. Use '===' to indicate that there is no YAML
header. Enter as many lines as needed. Terminate with a line
containing just '...'.

YAML テキストを入力するときは, 有効な YAML セパレータ/ヘッダ行, 
大抵は '---' から始めてください. YAML ヘッダがないときには
'===' を使ってください. 必要な分の行を入力してください. 
'...' から成る行で終了します.

To read in and process an external YAML file, enter '< filename'. The
ysh will also work as a standalone filter. It will read anything on
STDIN as a YAML stream and write the Perl output to STDOUT. You can say
(on most Unix systems):

外部の YAML ファイルから読み込んで処理するときには, '< filename' と
入力してください. ysh は独立したフィルタとしても機能します. 
STDIN から YAML ストリームで何かを読み込み, STDOUT に Perl を出力します. 
(大抵の Unix システムでは)次のように使うことが出来ます:

    cat yaml.file | ysh | less

=head1 コマンドラインオプション

=over 4

=item -MYAML::Module

Set the YAML implementation module you wish.

YAML を実装しているモジュールで使いたい物を設定します.

=item -l

Keep a log of all ysh activity in './ysh.log'. If the log file already
exists, new content will be concatenated to it.

ysh の全ての動作ログを './ysh.log' に残します. もしログファイルが
既に存在していたら, 新しいログはその後ろに追加されます.

=item -L

Keep a log of all ysh activity in './ysh.log'. If the log file already
exists, it will be deleted first.

ysh の全ての動作ログを './ysh.log' に残します. もしログファイルが
既に存在していたら, 先に削除されます.

=item -r

Test roundtripping. Every piece of Perl code entered will be Dumped,
Loaded, and Dumped again. If the two stores do not match, an error
message will be reported.

ラウンドトリップテスト. 入力された全ての Perl コード片はダンプされ, 
ロードされ, そして再びダンプされます. もし２回のダンプが一致しなければ
エラーメッセージが報告されます.

=item -R

Same as above, except that a B<confirmation> message will be printed
when the roundtrip succeeds.

上と同様ですが, ラウンドトリップが成功したときにB<確認>メッセージが
出力されます.

=item -i<number>

Specify the number of characters to indent each level. This is the same
as setting $YAML::Indent.

インデントの各レベルで何文字インデントするかを指定します. 
$YAML::Indent 設定と同じです.

=item -ub

Shortcut for setting '$YAML::UseBlock = 1'. Force multiline scalars to
use 'block' style.

'$YAML::UseBlock = 1' のショートカットです. 複数行のスカラーは
'block' スタイルを使うように強制します.

=item -uf

Shortcut for setting '$YAML::UseFold = 1'. Force multiline scalars to
use 'folded' style.

'$YAML::UseFold = 1' のショートカットです. 複数行のスカラーは
'folded' スタイルを使うように強制します.

=item -uc

Shortcut for setting '$YAML::UseCode = 1'. Allows subroutine references
to be processed.

'$YAML::UseCode = 1' のショートカットです. 関数リファレンスの処理を
許可します.

=item -nh

Shortcut for setting '$YAML::UseHeader = 0'.

'$YAML::UseHeader = 0' のショートカットです.

=item -nv

Shortcut for setting '$YAML::UseVersion = 0'.

'$YAML::UseVersion = 0' のショートカットです.

=item -v

Print the versions of ysh and YAML.pm.

ysh と YAML.pm のバージョンを表示します.

=item -V

In addition to the -v info, print the versions of YAML related modules.

-v の情報に加えて, YAML に関係するモジュールのバージョンも表示します.

=item -h

Print a help message.

ヘルプメッセージを表示します.

=back

=head2 YSH_OPT

If you don't want to enter your favorite options every time you enter
ysh, you can put the options into the C<YSH_OPT> environment variable.
Do something like this:

好みのオプションを ysh を使うたび毎回打ち込むのが面倒なひとは, 
それを C<YSH_OPT> 環境変数に設定しておくことが出来ます. 
次のようになるでしょう:

    export YSH_OPT='-i3 -uc -L'

=head1 関連項目

L<YAML>


=head1 著者

Ingy dE<ouml>t Net <ingy@cpan.org>


=head1 著作権

Copyright (c) 2006. Ingy dE<ouml>t Net. All rights reserved.
Copyright (c) 2001, 2002. Brian Ingerson. All rights reserved.


This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

このプログラムはフリーソフトウェアです。あなたは Perl と同じ
ライセンスの 元で再配布及び変更を行うことが出来ます.

See L<http://www.perl.com/perl/misc/Artistic.html>

参考 L<http://www.perl.com/perl/misc/Artistic.html>

