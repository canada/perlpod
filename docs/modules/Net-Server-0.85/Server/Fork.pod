=head1 名前

Net::Server::Fork - Net::Server personality

Net::Server::Fork - Net::Serverのパーソナリティ

=head1 概要

  use Net::Server::Fork;
  @ISA = qw(Net::Server::Fork);

  sub process_request {
     #...コード...
  }

  __PACKAGE__->run();

=head1 説明

Please read the pod on Net::Server first.  This module
is a personality, or extension, or sub class, of the
Net::Server module.

まず始めにNet::ServerのPODを読まれたし。このモジュールは
パーソナリティ(personality)、すなわちNet::Serverの拡張
（サブクラス）である。

This personality binds to one or more ports and then waits
for a client connection.  When a connection is received,
the server forks a child.  The child handles the request
and then closes.

このパーソナリティは一つ以上のポートにbindし、クライアント
からの接続を待つ。接続を受けるとサーバは子プロセスをfork
する。子プロセスはリクエストを処理してからソケットを閉じる。

=head1 引数

=over 4

=item check_for_dead

Number of seconds to wait before looking for dead children.
This only takes place if the maximum number of child processes
(max_servers) has been reached.  Default is 60 seconds.

死んだ子プロセス調べるまでに待つ秒数。これは子プロセスが
最大数(max_servers)に達したときに発生する。デフォルトは60秒。

=item max_servers

The maximum number of children to fork.  The server will
not accept connections until there are free children. Default
is 256 children.

forkする子プロセスの最大数。サーバは子プロセスの空きが
できるまで接続を受け付けない。デフォルトは256。

=item max_dequeue

The maximum number of dequeue processes to start.  If a
value of zero or undef is given, no dequeue processes will
be started.  The number of running dequeue processes will
be checked by the check_for_dead variable.

dequeue処理を始める最大数。もし値に0かundefを与えたなら、
dequeue処理は開始されない。実行しているdequeue処理の数は
check_for_dead変数に応じてチェックされる。

=item check_for_dequeue

Seconds to wait before forking off a dequeue process.  It
is intended to use the dequeue process to take care of
items such as mail queues.  If a value of undef is given,
no dequeue processes will be started.

dequeue処理をfork offするまでに待機する秒数。
これはメールキューのような要素を取り扱う
dequeue処理を使用する。もしも値にundefが与えられたら
dequeueプロセスは開始されない。

=back

=head1 設定ファイル

See L<Net::Server>.

=head1 処理の流れ

Process flow follows Net::Server until the post_accept phase.
At this point a child is forked.  The parent is immediately
able to wait for another request.  The child handles the
request and then exits.

処理の流れはpost_accept段階までNet::Serverと同じである。
この時点で、子プロセスがforkされる。親プロセスは直ちに
次のリクエストを待つことが出来る。子プロセスはリクエストを
処理して終了する。

=head1 HOOKS

The Fork server has the following hooks in addition to
the hooks provided by the Net::Server base class.
See L<Net::Server>

Forkサーバは基本クラスであるNet::Serverの提供する
hookに以下のものを付け加える。

=over 4

=item C<$self-E<gt>run_dequeue()>

This hook only gets called in conjuction with the
check_for_dequeue setting.

このhookはcheck_for_dequeueのセッティングと共に
呼び出されるだけである。

=back

=head1 TO DO

See L<Net::Server>

L<Net::Server>参照。

=head1 AUTHOR

Paul T. Seamons paul@seamons.com

=head1 SEE ALSO

Please see also

以下も参照して欲しい。

L<Net::Server::Fork>,
L<Net::Server::INET>,
L<Net::Server::PreFork>,
L<Net::Server::MultiType>,
L<Net::Server::SIG>
L<Net::Server::Single>

